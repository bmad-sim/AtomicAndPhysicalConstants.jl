var documenterSearchIndex = {"docs":
[{"location":"constants_used/#Constants-Used","page":"Constants Used","title":"Constants Used","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Here is a list of constants used in the package. Constants are pulled from the NIST table of the 2022 CODATA release. Note that m_pion_0 and m_pion_charged are pulled from PDG.","category":"page"},{"location":"constants_used/#Physical-Constants","page":"Constants Used","title":"Physical Constants","text":"","category":"section"},{"location":"constants_used/#Speed-of-light:-c_light-2.99792458e8-*-u\"m/s\"","page":"Constants Used","title":"Speed of light: c_light = 2.99792458e8 * u\"m/s\"","text":"","category":"section"},{"location":"constants_used/#Planck's-constant:-h_planck-4.135667696e-15-*-u\"eV*s\"","page":"Constants Used","title":"Planck's constant: h_planck = 4.135667696e-15 * u\"eV*s\"","text":"","category":"section"},{"location":"constants_used/#Classical-electron-radius:-r_e-2.8179403205e-15-*-u\"m\"","page":"Constants Used","title":"Classical electron radius: r_e = 2.8179403205e-15 * u\"m\"","text":"","category":"section"},{"location":"constants_used/#Vacuum-permeability:-mu_0_vac-1.25663706127e-6-*-u\"N/A2\"","page":"Constants Used","title":"Vacuum permeability: mu_0_vac = 1.25663706127e-6 * u\"N/A^2\"","text":"","category":"section"},{"location":"constants_used/#Elementary-charge:-e_charge-1.602176634e-19-*-u\"C\"","page":"Constants Used","title":"Elementary charge:  e_charge = 1.602176634e-19 * u\"C\"","text":"","category":"section"},{"location":"constants_used/#Avogadro's-constant:-N_avogadro-6.02214076e23","page":"Constants Used","title":"Avogadro's constant: N_avogadro = 6.02214076e23","text":"","category":"section"},{"location":"constants_used/#Fine-structure-constant:-fine_structure-0.0072973525643","page":"Constants Used","title":"Fine structure constant: fine_structure = 0.0072973525643","text":"","category":"section"},{"location":"constants_used/#Species-Mass","page":"Constants Used","title":"Species Mass","text":"","category":"section"},{"location":"constants_used/#Electron-Mass:-m_electron-0.51099895069-*-u\"MeV/c2\"","page":"Constants Used","title":"Electron Mass: m_electron = 0.51099895069 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Proton-Mass:-m_proton-9.382720894300001e2-*-u\"eV/c2\"","page":"Constants Used","title":"Proton Mass: m_proton = 9.382720894300001e2 * u\"eV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Neutron-Mass:-m_neutron-9.395654219399999e2-*-u\"MeV/c2\"","page":"Constants Used","title":"Neutron Mass: m_neutron = 9.395654219399999e2 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Muon-Mass:-m_muon-1.056583755e2-*-u\"MeV/c2\"","page":"Constants Used","title":"Muon Mass: m_muon = 1.056583755e2 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Helion-Mass-He3-nucleus:-m_helion-2.80839161112e3-*-u\"MeV/c2\"","page":"Constants Used","title":"Helion Mass He3 nucleus: m_helion = 2.80839161112e3 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Deuteron-Mass:-m_deuteron-1.875612945e3-*-u\"MeV/c2\"","page":"Constants Used","title":"Deuteron Mass: m_deuteron = 1.875612945e3 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#uncharged-pion-mass:-m_pion_0-1.349768277676847e2-*-u\"MeV/c2\"","page":"Constants Used","title":"uncharged pion mass: m_pion_0 = 1.349768277676847e2 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#charged-pion-mass:-m_pion_charged-1.3957039098368132e2-*-u\"MeV/c2\"","page":"Constants Used","title":"charged pion mass: m_pion_charged = 1.3957039098368132e2 * u\"MeV/c^2\"","text":"","category":"section"},{"location":"constants_used/#Species-Magnetic-Momoments","page":"Constants Used","title":"Species Magnetic Momoments","text":"","category":"section"},{"location":"constants_used/#Deuteron-magnetic-moment:-mu_deuteron-4.330735087e-27-*-u\"J/T\"","page":"Constants Used","title":"Deuteron magnetic moment: mu_deuteron = 4.330735087e-27 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Electron-magnetic-moment:-mu_electron-9.2847646917e-24-*-u\"J/T\"","page":"Constants Used","title":"Electron magnetic moment: mu_electron = -9.2847646917e-24 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Helion-magnetic-moment:-mu_helion-1.07461755198e-26-*-u\"J/T\"","page":"Constants Used","title":"Helion magnetic moment: mu_helion = -1.07461755198e-26 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Muon-magnetic-moment:-mu_muon-4.4904483e-26-*-u\"J/T\"","page":"Constants Used","title":"Muon magnetic moment: mu_muon = -4.4904483e-26 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Neutron-magnetic-moment:-mu_neutron-9.6623653e-27-*-u\"J/T\"","page":"Constants Used","title":"Neutron magnetic moment: mu_neutron = -9.6623653e-27 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Proton-magnetic-moment:-mu_proton-1.41060679545e-26-*-u\"J/T\"","page":"Constants Used","title":"Proton magnetic moment: mu_proton = 1.41060679545e-26 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Triton-magnetic-moment:-mu_triton-1.5046095178e-26-*-u\"J/T\"","page":"Constants Used","title":"Triton magnetic moment: mu_triton = 1.5046095178e-26 * u\"J/T\"","text":"","category":"section"},{"location":"constants_used/#Conversion-Factors","page":"Constants Used","title":"Conversion Factors","text":"","category":"section"},{"location":"constants_used/#kg-per-standard-atomic-mass-unit:-kg_per_amu-1.66053906892e-27","page":"Constants Used","title":"kg per standard atomic mass unit: kg_per_amu = 1.66053906892e-27","text":"","category":"section"},{"location":"constants_used/#eV-per-standard-atomic-mass-unit:-eV_per_amu-9.3149410372e8","page":"Constants Used","title":"eV per standard atomic mass unit: eV_per_amu =  9.3149410372e8","text":"","category":"section"},{"location":"constants_used/#Joules-per-eV:-J_per_eV-1.602176634e-19","page":"Constants Used","title":"Joules per eV: J_per_eV = 1.602176634e-19","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Subatomic particles included with information about charge, mass, anomalous magnetic moment, and spin are:","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"photon\npion0\npion+\npion-\nmuon\nantimuon\nelectron\npositron\nproton\nanti-proton\nneutron\nanti-neutron\ndeuteron\nanti-deuteron","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"In addition, a collection of all the isotopes documented by NIST is included. Values may be updated with setIsos()","category":"page"},{"location":"units/#Setting-Units-for-Constants-And-Particle-Functions,-Basic-Unitful-Usage","page":"APCdef","title":"Setting Units for Constants And Particle Functions, Basic Unitful Usage","text":"","category":"section"},{"location":"units/#@APCdef","page":"APCdef","title":"@APCdef","text":"","category":"section"},{"location":"units/#Description","page":"APCdef","title":"Description","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"@APCdef should be called at the initialization of the package. @APCdef sets the units for physical constants, species mass and charge. It defines the physical constants and getter functions for species mass and charge with the proper unit and data, see this page for more detail.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"The user have the freedom to choose the unit they want for mass, length, time, energy, and charge. by using our predefined unitsystems ACCELERATOR (default), MKS, and CGS to quickly setup the units.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"The users have the freedom to choose the version of CODATA they prefer.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"The users have the freedom to choose whether they want the constants to be of type Float64 or Unitful types, which makes unit calculations easier. See more about Unitful here.","category":"page"},{"location":"units/#Syntax","page":"APCdef","title":"Syntax","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"@APCdef(CODATA = 2022, unitsystem = ACCELERATOR, unitful = false)","category":"page"},{"location":"units/#Options","page":"APCdef","title":"Options","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"CODATA sets the year of which the constants from CODATA is used. Enter the year number. Default to 2022.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"unitsystem defines the set of units for the constants. There are 3 available options: ACCELERATOR,MKS,CGS. Default to ACCELERATOR.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"unitful is a boolean. If it is set to true, the constants will be a Unitful type. If it is set to false, it will be a Float64. Default to false.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"ACCELERATOR units:","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"mass: eV/c^2\nlength: m\ntime: s\nenergy: eV\ncharge: elementary charge","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"MKS units:","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"mass: kg\nlength: m\ntime: s\nenergy: J\ncharge: C","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"CGS units:","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"mass: g\nlength: cm\ntime: s\nenergy: J\ncharge: C","category":"page"},{"location":"units/#Example","page":"APCdef","title":"Example","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> @APCdef # Sets unit system to ACCELERATOR (default). define constants with type Float64\njulia> C_LIGHT\n2.99792458e8 # Now the constant C_LIGHT is defined with units m/s and type Float64.","category":"page"},{"location":"units/#Unitful","page":"APCdef","title":"Unitful","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"Unitful.jl is a powerful package for managing physical units.","category":"page"},{"location":"units/#Units","page":"APCdef","title":"Units","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"Unitful uses the macro @u_str to create units. ","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> kg = u\"kg\"","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"The variable kg represents the unit kilogram.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"To create constants with units, simply write the number in front of the unit.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> M = 1u\"kg\"","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"Now M is a variable that represents 1 kilogram.","category":"page"},{"location":"units/#Conversion-to-Float","page":"APCdef","title":"Conversion to Float","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"To convert a Unitful object to Float64, use the field .val","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> a = 1.5u\"kg\"\njulia> a.val\n1.5","category":"page"},{"location":"units/#Unit-Conversions","page":"APCdef","title":"Unit Conversions","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"Unitful provides a convenent way to create new units with expressions. Prefix can also be directly added.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> m = 0.511u\"MeV/c^2\"","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"To convert between units, use the function uconvert(), putting the new unit in the first parameter and the variable in the second parameter.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"julia> uconvert(u\"kg\",m)\n9.109402419518556e-31 kg","category":"page"},{"location":"units/#Package-specific-Units","page":"APCdef","title":"Package-specific Units","text":"","category":"section"},{"location":"units/","page":"APCdef","title":"APCdef","text":"AtomicAndPhysicalConstants defined 3 units that is not from the Unitful package. Within the package, users can directly use @u_str macro to access these units, just like any other units.","category":"page"},{"location":"units/","page":"APCdef","title":"APCdef","text":"amu : It represents the atomic mass unit. \ne : It represents the elementary charge.\nh_bar : It represents the reduced Planck's constant. It is used as the unit for spin.","category":"page"},{"location":"constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants/#Available-Constants","page":"Constants","title":"Available Constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The macro @APCdef defines a set of physical constants with the provided set of units (For more details, see this page). The following example is how to use the macro and the physical constants.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> @APCdef\njulia> C_LIGHT\n2.99792458e8","category":"page"},{"location":"constants/#Constants-Defined-by-@APCdef","page":"Constants","title":"Constants Defined by @APCdef","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Speed of light: C_LIGHT\nPlanck's constant: H_PLANCK\nReduced Planck's constant: H_BAR_PLANCK\nClassical electron radius: R_E\nClassical proton radius: R_P\nElementary charge:  E_CHARGE\nVacuum permeability: MU_0_VAC\nPermittivity of free space: EPS_0_VAC\nClassical Radius Factor: CLASSICAL_RADIUS_FACTOR\nFine structure constant: FINE_STRUCTURE\nAvogadro's constant: N_AVOGADRO","category":"page"},{"location":"constants/#Species-Mass-and-Charge","page":"Constants","title":"Species Mass and Charge","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"To access mass or charge of a species, use massof() getter function for mass, and chargeof() getter function for charge. The function will return unit given to @APCdef. For Example:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> e = Species(\"electron\") \n\njulia> @APCdef unitsystem = ACCELERATOR unitful = true # set units to ACCELERATOR unit system, where mass unit is eV/c^2 and charge unit is elementary charge\n\njulia> massof(e) \n510998.95069 eV c⁻²\n\njulia> chargeof(e)\n-1.0 e\n","category":"page"},{"location":"constants/#Constants-Sources-and-Updates","page":"Constants","title":"Constants Sources and Updates","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The data for the constants are provided by CODATA. Users have the freedom to choose the year of CODATA in @APCdef. For example: ","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> @APCdef CODATA = 2018","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"The data are downloaded to the local file.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"The isotope data are provided by NIST. We extract the isotope data from their database. The NIST doesn't store old releases, so the isotope data will always be the newest release.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"The pion0 and pion+- data are provided by PDG(Particle Data Group). We extracted the data from the database of pdgapi.lbl.gov","category":"page"},{"location":"#AtomicAndPhysicalConstants.jl","page":"Home","title":"AtomicAndPhysicalConstants.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl provides a quick way to access information about different species and physical constants.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is designed to provide atomic and physical constants including things like the speed of light, subatomic particle properties, atomic isotope properties, etc. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Values are obtained from CODATA (Committee on Data of the International Science Council), NIST (National Institute of Standards and Technology), and PDG (Particle Data Group). This package enables users to access and customize units for the constants. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is compatible with Julia's Unitful.jl library for convenient unit manipulation. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl has the following main features and advantages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simple Unit Manipulation: Users can define the units they want to use in a simple and consistent way. Unitful.jl provides a simple way to do unit conversion and calculations.\nRigorous and Up-to-Date Data: We uses the most updated values from creditable sources. We also provided the option to use past data for specific purposes.\nSimple usage: Users can access data of a wide range of particles and physic constants by simply defining a species with their name or call a variable in the namespace. ","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"#Defining-Physical-Constants","page":"Home","title":"Defining Physical Constants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The macro @APCdef helps you define a set of useful physical constants in your namespace. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @APCdef\njulia> C_LIGHT\n2.99792458e8","category":"page"},{"location":"","page":"Home","title":"Home","text":"Users have the options for choosing the type and unit of the constants, see this page","category":"page"},{"location":"#Defining-Species","page":"Home","title":"Defining Species","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The constructor Species() helps you create a structure with all the information of the species stored in it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> e = Species(\"electron\")\njulia> hydrogen = Species(\"H\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You could use getter functions to access its properties or directly calling its fields. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> massof(e)\n510998.95069\njulia> hydrogen.spin\n1.0 h_bar","category":"page"},{"location":"","page":"Home","title":"Home","text":"See more about Species() constructors and getter functions here","category":"page"},{"location":"species/#Species","page":"Species","title":"Species","text":"","category":"section"},{"location":"species/#Introduction","page":"Species","title":"Introduction","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Species is a type to store the information of an particle. ","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"A species is defined with the following fields:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"struct Species \n    name    # name of the particle to track\n    charge  # charge of the particle \n    mass    # mass of the particle\n    spin    # spin of the particle\n    moment  # magnetic moment of the particle\n    iso     # mass number of atomic isotope\n\tkind    # the kind of particle.\nend;","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"There are 5 kinds of species: ATOM HADRON LEPTON PHOTON NULL. The kind of species is stored within the kind field.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"The fields are stored with a set of units. If the fields are directly accessed, it will return a Unitful value. For example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"electron\").mass\n0.51099895069 MeV c^-2","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"The default units are:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"mass:  MeV/c^2\ncharge: elementary charge\nspin: hbar\nmoment: J/T","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"We recommended using our getter functions massof() an d chargeof() to obtain values in units you prefer. See this page for more information.","category":"page"},{"location":"species/#Construct-a-Species","page":"Species","title":"Construct a Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Construct the particle with the constructor Species(name).","category":"page"},{"location":"species/#Constructing-Subatomic-Species","page":"Species","title":"Constructing Subatomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct a subatomic species, put the name of the subatomic species in the field name. Note that the name must be provided exactly.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"electron\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"To construct an antiparticle, prepend the prefix \"anti-\" in the front.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"anti-proton\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"See the list of all available subatomic species here","category":"page"},{"location":"species/#Constructing-Atomic-Species","page":"Species","title":"Constructing Atomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct an atomic species, put the following 3 things in name:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Atomic Symbol\n\"#\" followed by the mass number of the atomic (optional)\ncharge (optional)","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"C#13+\") #Carbon-13 with a single positive charge","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"If mass number is not provided, the average will be used\nIf charge is not provided, a neutral atom will be returned.\nCharge can be provided by the following format\n\"+\" represents single positive charge\n\"++\" represents double positive charge\n\"+n\" represents n positive charge\n\"-\" represents single negative charge\n\"–\" represents double negative charge\n\"-n\" represents n negative charge\nTo construct an anti atom, put \"anti-\" in the front.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"Al+4\") #average Aluminum with 3 positive charge\njulia> Species(\"anti-H\") #anti-hydrogen","category":"page"},{"location":"species/#Alternative-Way-of-Constructing-Atomic-Species","page":"Species","title":"Alternative Way of Constructing Atomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"We also provide the constructor ","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Species(name::String, charge::Int, iso::Int)","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"where users can enter charge and mass number as separate parameter.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"The parameter charge and iso are optional and it will use default values if not provided. Defaults are neutral atom and average atom.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"If charge or mass number are also provided in name. The charge and mass number in name will override the one given in the parameter.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"C\",charge = 1, iso = 13) #Carbon-13 with a single positive charge","category":"page"},{"location":"species/#Species-Functions","page":"Species","title":"Species Functions","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Species functions take a Species as their only parameter and returns a specific property of it. Here is the list of species functions:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"massof()\nchargeof()\natomicnumber()\ng_spin()\ngyromagnetic_anomaly()\ng_nucleon()\nfullname()","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note: One must call @APCdef before calling massof() and chargeof().","category":"page"},{"location":"species/#List-of-Available-subatomic-species","page":"Species","title":"List of Available subatomic species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"photon\npion0\npion+\npion-\nmuon\nanti-muon\nelectron\npositron or anti-electron\nproton\nanti-proton\nneutron\nanti-neutron\ndeuteron\nanti-deuteron","category":"page"}]
}
