var documenterSearchIndex = {"docs":
[{"location":"constants_used/#Constants-Used","page":"Constants Used","title":"Constants Used","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Here is a list of constants used in the package. The following constants values are pulled from the NIST table of the 2022 CODATA release. Note that m_pion_0 and m_pion_charged are pulled from PDG.","category":"page"},{"location":"constants_used/#Physical-Constants","page":"Constants Used","title":"Physical Constants","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Speed of light: c_light = 2.99792458e8 * u\"m/s\"\nPlanck's constant: h_planck = 4.135667696e-15 * u\"eV*s\"\nClassical electron radius: r_e = 2.8179403205e-15 * u\"m\"\nVacuum permeability: mu_0_vac = 1.25663706127e-6 * u\"N/A^2\"\nElementary charge: e_charge = 1.602176634e-19 * u\"C\"\nAvogadro's constant: N_avogadro = 6.02214076e23\nFine structure constant: fine_structure = 0.0072973525643","category":"page"},{"location":"constants_used/#Species-Mass","page":"Constants Used","title":"Species Mass","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Electron Mass: m_electron = 0.51099895069 * u\"MeV/c^2\"\nProton Mass: m_proton = 938.2720894300001 * u\"MeV/c^2\"\nNeutron Mass: m_neutron = 9.395654219399999e2 * u\"MeV/c^2\"\nMuon Mass: m_muon = 1.056583755e2 * u\"MeV/c^2\"\nHelion Mass He3 nucleus: m_helion = 2.80839161112e3 * u\"MeV/c^2\"\nDeuteron Mass: m_deuteron = 1.875612945e3 * u\"MeV/c^2\"\nuncharged pion mass: m_pion_0 = 1.349768277676847e2 * u\"MeV/c^2\"\ncharged pion mass: m_pion_charged = 1.3957039098368132e2 * u\"MeV/c^2\"","category":"page"},{"location":"constants_used/#Species-Magnetic-Momoments","page":"Constants Used","title":"Species Magnetic Momoments","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Deuteron magnetic moment: mu_deuteron = 4.330735087e-27 * u\"J/T\"\nElectron magnetic moment: mu_electron = -9.2847646917e-24 * u\"J/T\"\nHelion magnetic moment: mu_helion = -1.07461755198e-26 * u\"J/T\"\nMuon magnetic moment: mu_muon = -4.4904483e-26 * u\"J/T\"\nNeutron magnetic moment: mu_neutron = -9.6623653e-27 * u\"J/T\"\nProton magnetic moment: mu_proton = 1.41060679545e-26 * u\"J/T\"\nTriton magnetic moment: mu_triton = 1.5046095178e-26 * u\"J/T\"","category":"page"},{"location":"constants_used/#Conversion-Factors","page":"Constants Used","title":"Conversion Factors","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"kg per standard atomic mass unit: kg_per_amu = 1.66053906892e-27\neV per standard atomic mass unit: eV_per_amu = 9.3149410372e8\nJoules per eV: J_per_eV = 1.602176634e-19","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Subatomic particles included with information about charge, mass, anomalous magnetic moment, and spin are:","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"photon\npion0\npion+\npion-\nmuon\nantimuon\nelectron\npositron\nproton\nanti-proton\nneutron\nanti-neutron\ndeuteron\nanti-deuteron","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"In addition, a collection of all the isotopes documented by NIST is included. Values may be updated with setIsos()","category":"page"},{"location":"helper_functions/#Helper-Functions","page":"Helper Functions","title":"Helper Functions","text":"","category":"section"},{"location":"helper_functions/#setisos()","page":"Helper Functions","title":"setisos()","text":"","category":"section"},{"location":"helper_functions/","page":"Helper Functions","title":"Helper Functions","text":"The setisos() function downloads the latest isotope data from NIST and creates a Julia file containing a usable dictionary of each element with all of their isotopes","category":"page"},{"location":"constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants/#Available-Constants","page":"Constants","title":"Available Constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The macro @APCdef defines a set of physical constants with the provided set of units (For more details, see this page. The following example is how to use the macro and the physical constants.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> using AtomicAndPhysicalConstants\njulia> @APCdef\njulia> APC.C_LIGHT\n2.99792458e8","category":"page"},{"location":"constants/#Constants-Defined-by-@APCdef","page":"Constants","title":"Constants Defined by @APCdef","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Speed of light: C_LIGHT\nPlanck's constant: H_PLANCK\nReduced Planck's constant: H_BAR_PLANCK\nClassical electron radius: R_E\nClassical proton radius: R_P\nElementary charge: E_CHARGE\nVacuum permeability: MU_0_VAC\nPermittivity of free space: EPS_0_VAC\nClassical Radius Factor: CLASSICAL_RADIUS_FACTOR\nFine structure constant: FINE_STRUCTURE\nAvogadro's constant: N_AVOGADRO","category":"page"},{"location":"constants/#Listing-Constants:-showconst()","page":"Constants","title":"Listing Constants: showconst()","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The showconst() function displays all available constants in the package.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"There are three options:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> showconst() \n#list all the physical constants created by @APCdef\njulia> showconst(:subatomic) \n#list all possible subatomic particles\njulia> showconst(:Fe) \n# ':Fe' can be replaced by any atomic symbols\n# list all the available isotopes of that element","category":"page"},{"location":"constants/#Species-Mass-and-Charge","page":"Constants","title":"Species Mass and Charge","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"To access mass or charge of a species, use massof() getter function for mass, and chargeof() getter function for charge. The function will return unit given to @APCdef. For Example:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> e = Species(\"electron\")\n\njulia> @APCdef unitsystem = ACCELERATOR unittype = Unitful\n# set units to ACCELERATOR unit system, where mass unit is eV/c^2 and charge unit is elementary charge\n\njulia> massof(e)\n510998.95069 eV c⁻²\n\njulia> chargeof(e)\n-1.0 e\n","category":"page"},{"location":"constants/#Constants-Sources-and-Updates","page":"Constants","title":"Constants Sources and Updates","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The constants data comes from CODATA. You can choose which year of CODATA values to use through different submodules. If not specified, it defaults to CODATA2022. For example:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> using AtomicAndPhysicalConstants.CODATA2018 #use CODATA2018 values\njulia> using AtomicAndPhysicalConstants #use CODATA2022 values","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"NIST provides the isotope data, which we extract from their database. Since NIST doesn't maintain old releases, the isotope data always reflects their latest release.\nThe pion0 and pion± data comes from PDG (Particle Data Group). We extract this data from the database at pdgapi.lbl.gov","category":"page"},{"location":"constants/#CODATA_releases()","page":"Constants","title":"CODATA_releases()","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The CODATA_releases() function lists all the available CODATA release years in the package.","category":"page"},{"location":"units/#Setting-Units-for-Constants-And-Particle-Functions-using-@APCdef","page":"Setting Units: APCdef","title":"Setting Units for Constants And Particle Functions using @APCdef","text":"","category":"section"},{"location":"units/#@APCdef-Description","page":"Setting Units: APCdef","title":"@APCdef Description","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"@APCdef must be called during package initialization. It sets the units for physical constants,  species mass, and charge.  The macro also defines physical constants in the appropriate units and creates getter functions  for species mass and charge with appropriate units and data. See the Species page for more details. Note @APCdef can only be called once.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Users can choose their preferred units for mass, length, time, energy, and charge using predefined unit systems: ACCELERATOR (default), MKS, or CGS. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Users can also specify whether constants should be of type Float64 (default), Unitful,  or Dynamic Quantities for easier unit calculations. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"All constants are stored in a named tuple, whose name can be customized (defaults to APC). For example, the default name for the speed of light is APC.C_LIGHT.","category":"page"},{"location":"units/#**@APCdef-Syntax**","page":"Setting Units: APCdef","title":"@APCdef Syntax","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"@APCdef(name = APC, unitsystem = ACCELERATOR, unittype = Float)","category":"page"},{"location":"units/#Keyword-Parameters","page":"Setting Units: APCdef","title":"Keyword Parameters","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"name specifies the named tuple that stores the constants (default: APC).\nunitsystem sets the unit system for constants: ACCELERATOR (default), MKS, or CGS.\nunittype sets the constant type: Float (default), Unitful, or DynamicQuantities. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"This also determines the return type of both the named tuple and the massof() and chargeof() functions. See the DynamicQuantities.jl documentation for a discussion of the difference between how Unitful and DynamicQuatities handle units. Note: setting the unit type to DynamicQuantities will return quantities only in SI units.","category":"page"},{"location":"units/#Unit-Systems","page":"Setting Units: APCdef","title":"Unit Systems","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"ACCELERATOR units:\nmass: eV/c^2\nlength: m\ntime: s\nenergy: eV\ncharge: elementary charge\nMKS units:\nmass: kg\nlength: m\ntime: s\nenergy: J\ncharge: C\nCGS units:\nmass: g\nlength: cm\ntime: s\nenergy: J\ncharge: C","category":"page"},{"location":"units/#**Example**","page":"Setting Units: APCdef","title":"Example","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef  # Sets unit system to ACCELERATOR (default). define constants with type Float64.\n\njulia> APC.C_LIGHT  # Access the constant within the named tuple `APC`.\n2.99792458e8        # Now the constant is defined with units m/s and type Float64.","category":"page"},{"location":"units/#**Unitful**","page":"Setting Units: APCdef","title":"Unitful","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful.jl is a powerful package for managing physical units.  This package uses Unitful internally to store constants.","category":"page"},{"location":"units/#**Units**","page":"Setting Units: APCdef","title":"Units","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful uses the macro @u_str to create units.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> kg = u\"kg\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"The variable kg represents the unit kilogram.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Creating constants with units is straightforward—simply write the number before the unit.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> M = 1u\"kg\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Now M represents 1 kilogram.","category":"page"},{"location":"units/#**Conversion-to-Float**","page":"Setting Units: APCdef","title":"Conversion to Float","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To convert a Unitful object to Float64, access the .val field.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> a = 1.5u\"kg\"\njulia> a.val\n1.5","category":"page"},{"location":"units/#**Unit-Conversions**","page":"Setting Units: APCdef","title":"Unit Conversions","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful provides a convenient way to create new units with expressions. You can also add prefixes directly.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> m = 0.511u\"MeV/c^2\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To convert between units, use the uconvert() function with the target unit as the first parameter and the variable as the second.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> uconvert(u\"kg\",m)\n9.109402419518556e-31 kg","category":"page"},{"location":"units/#@APCdef-returning-Unitful-type","page":"Setting Units: APCdef","title":"@APCdef returning Unitful type","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To use Unitful-typed constants, set unittype to Unitful.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef unittype = Unitful \n\njulia> APC.C_LIGHT \n2.99792458e8 m s⁻¹ # Now the constant is a Unitful quantity.","category":"page"},{"location":"units/#Package-specific-Unitful-Units","page":"Setting Units: APCdef","title":"Package-specific Unitful Units","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"AtomicAndPhysicalConstants defines three custom units not found in the Unitful package.  Users can access these units with the @u_str macro, just like standard Unitful units.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"amu: It represents the atomic mass unit.\ne: It represents the elementary charge.\nh_bar: It represents the reduced Planck's constant. It is used as the unit for spin.","category":"page"},{"location":"units/#@APCdef-returning-DynamicQuantities.jl-type","page":"Setting Units: APCdef","title":"@APCdef returning DynamicQuantities.jl type","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"DynamicQuantities.jl is another popular package for managing units. We also support returning constants in DynamicQuantities type.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef unittype = DynamicQuantities\n\njulia> APC.C_LIGHT \n2.99792458e8 m s⁻¹ # Now the constant is a DynamicQuantities quantity.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Note: setting the unit type to DynamicQuantities will return quantities only in SI units.","category":"page"},{"location":"#AtomicAndPhysicalConstants.jl","page":"Home","title":"AtomicAndPhysicalConstants.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl (APC) provides a quick way to access information about different species and physical constants optimized for faster compile time and simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is designed to provide atomic and physical constants including things like the speed of light, subatomic particle properties, atomic isotope properties, etc. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Values are obtained from CODATA (Committee on Data of the International Science Council), NIST (National Institute of Standards and Technology), and PDG (Particle Data Group). This package enables users to access and customize units for the constants. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is compatible with Julia's Unitful.jl library for convenient unit manipulation. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl has the following main features and advantages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simple Unit Manipulation: Users can define the units they want to use in a simple and consistent way. Unitful.jl provides a simple way to do unit conversion and calculations.\nRigorous and Up-to-Date Data: We uses the most updated values from creditable sources. We also provided the option to use past data for specific purposes.\nSimple usage: Users can access data of a wide range of particles and physic constants by simply defining a species with their name or call a variable in the namespace. ","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use AtomicAndPhysicalConstants, like any Julia package, execute the commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"AtomicAndPhysicalConstants.jl\")\njulia> using AtomicAndPhysicalConstants","category":"page"},{"location":"","page":"Home","title":"Home","text":"The macro @APCdef initializes the APC package. @APCdef sets the units for physical constants, species mass and charge. It defines the physical constants and getter functions for species mass and charge with the proper unit and data. Documentation is  here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @APCdef\njulia> APC.C_LIGHT\n2.99792458e8","category":"page"},{"location":"","page":"Home","title":"Home","text":"Users have the options for choosing the return type (Float64, Unitful, or DynamicQuantities) and unit of the constants, see this page","category":"page"},{"location":"#Defining-Species","page":"Home","title":"Defining Species","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The constructor Species() helps you create a structure with all the information of the species stored in it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> e = Species(\"electron\")\njulia> hydrogen = Species(\"H\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You could use getter functions to access its properties or directly calling its fields. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> massof(e)\n510998.95069\njulia> hydrogen.spin\n1.0 h_bar","category":"page"},{"location":"","page":"Home","title":"Home","text":"See more about Species() constructors and getter functions here","category":"page"},{"location":"species/#Species","page":"Species","title":"Species","text":"","category":"section"},{"location":"species/#Introduction","page":"Species","title":"Introduction","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Species is a type that stores information about a particle.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"A species is defined by the following fields:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"struct Species\n    name   # name of the particle to track\n    charge # charge of the particle\n    mass   # mass of the particle\n    spin   # spin of the particle\n    moment # magnetic moment of the particle\n    iso    # mass number of atomic isotope\n    kind   # the kind of particle\nend","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"The kind field classifies species into five types: ATOM, HADRON, LEPTON, PHOTON, and NULL.  The NULL kind serves as a placeholder that can be used by Julia code. For example, if a struct has a Species component, a NULL species can be used as an initial value to indicate that the species component has not yet been set.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Each field stores values with their corresponding units and returns a Unitful value when accessed directly. For example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"electron\").mass\n0.51099895069 MeV c^-2","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"The default units are:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"mass: MeV/c²\ncharge: elementary charge\nspin: ℏ\nmoment: J/T","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"For convenience, use our getter functions massof() and chargeof() to obtain values in your preferred units.  See the Constants page for more information.","category":"page"},{"location":"species/#Construct-a-Species","page":"Species","title":"Construct a Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Use the constructor Species(name) to create a species.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note: Species names follow the OpenPMD standard.","category":"page"},{"location":"species/#Constructing-a-Null-species","page":"Species","title":"Constructing a Null species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"The Null species is useful for bookkeeping purposes, such as a placeholder in a struct component to indicate an unset species. To instantiate:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"Null\")\njulia> Species() # Same as above","category":"page"},{"location":"species/#Constructing-Subatomic-Species","page":"Species","title":"Constructing Subatomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct a subatomic species, provide the exact name of the particle in the name field. Note that the name must be provided exactly.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"electron\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"For antiparticles, prepend \"anti-\" to the name.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"anti-proton\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"See the list of all available subatomic species at the end of this page.","category":"page"},{"location":"species/#Constructing-Atomic-Species","page":"Species","title":"Constructing Atomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct an atomic species, include these components in name:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Atomic Symbol\nMass number of the atom (optional), format:\nMass number before the atomic symbol (accepts unicode superscript)\nOptional \"#\" symbol at the beginning\nIf not specified, uses the average of the mass in naturally occurring samples.\nThese formats all represent Hydrogen-1:\njulia   julia> Species(\"1H\")   julia> Species(\"¹H\")   julia> Species(\"#1H\")\nCharge (optional), format (all accept unicode superscript):\n\"+\" for single positive charge\n\"++\" for double positive charge\n\"+n\" or \"n+\" for n positive charges\n\"-\" for single negative charge\n\"–\" for double negative charge\n\"-n\" or \"n-\" for n negative charges\nDefaults to 0 if not specified\nAdd \"anti-\" prefix to construct an anti-atom","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"13C+\")   # Carbon-13 with a single positive charge\njulia> Species(\"¹⁵N³⁻\")  # Nitrogen-15 with a 3 negative charge\njulia> Species(\"Al+3\")   # Average Aluminum with 3 positive charge\njulia> Species(\"anti-H\") # Anti-hydrogen","category":"page"},{"location":"species/#Species-Functions","page":"Species","title":"Species Functions","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Species functions each take a Species as their parameter and return a specific property. Here are the available functions:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"massof()\nchargeof()\natomicnumber()\ng_spin()\ngyromagnetic_anomaly()\ng_nucleon()\nfullname()","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note: You must call @APCdef before using massof() or chargeof().","category":"page"},{"location":"species/#List-of-Available-Subatomic-Species","page":"Species","title":"List of Available Subatomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"anti-deuteron","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"- anti-electron same as positron","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"anti-neutron\nanti-proton\nanti-muon\ndeuteron\nelectron\nmuon\nneutron\nphoton\npion0\npion+\npion-\npositron\nproton","category":"page"}]
}
