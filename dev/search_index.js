var documenterSearchIndex = {"docs":
[{"location":"constants_used/#Constants-Used","page":"Constants Used","title":"Constants Used","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Here is a list of constants used in the package. The following constants values are pulled from the NIST table of the 2022 CODATA release. Note that m_pion_0 and m_pion_charged are pulled from PDG.","category":"page"},{"location":"constants_used/#Physical-Constants","page":"Constants Used","title":"Physical Constants","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Speed of light: c_light = 2.99792458e8 * u\"m/s\"\nPlanck's constant: h_planck = 4.135667696e-15 * u\"eV*s\"\nClassical electron radius: r_e = 2.8179403205e-15 * u\"m\"\nVacuum permeability: mu_0_vac = 1.25663706127e-6 * u\"N/A^2\"\nElementary charge: e_charge = 1.602176634e-19 * u\"C\"\nAvogadro's constant: N_avogadro = 6.02214076e23\nFine structure constant: fine_structure = 0.0072973525643","category":"page"},{"location":"constants_used/#Species-Mass","page":"Constants Used","title":"Species Mass","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Electron Mass: m_electron = 0.51099895069 * u\"MeV/c^2\"\nProton Mass: m_proton = 938.2720894300001 * u\"MeV/c^2\"\nNeutron Mass: m_neutron = 9.395654219399999e2 * u\"MeV/c^2\"\nMuon Mass: m_muon = 1.056583755e2 * u\"MeV/c^2\"\nHelion Mass He3 nucleus: m_helion = 2.80839161112e3 * u\"MeV/c^2\"\nDeuteron Mass: m_deuteron = 1.875612945e3 * u\"MeV/c^2\"\nuncharged pion mass: m_pion_0 = 1.349768277676847e2 * u\"MeV/c^2\"\ncharged pion mass: m_pion_charged = 1.3957039098368132e2 * u\"MeV/c^2\"","category":"page"},{"location":"constants_used/#Species-Magnetic-Momoments","page":"Constants Used","title":"Species Magnetic Momoments","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Deuteron magnetic moment: mu_deuteron = 4.330735087e-27 * u\"J/T\"\nElectron magnetic moment: mu_electron = -9.2847646917e-24 * u\"J/T\"\nHelion magnetic moment: mu_helion = -1.07461755198e-26 * u\"J/T\"\nMuon magnetic moment: mu_muon = -4.4904483e-26 * u\"J/T\"\nNeutron magnetic moment: mu_neutron = -9.6623653e-27 * u\"J/T\"\nProton magnetic moment: mu_proton = 1.41060679545e-26 * u\"J/T\"\nTriton magnetic moment: mu_triton = 1.5046095178e-26 * u\"J/T\"","category":"page"},{"location":"constants_used/#Conversion-Factors","page":"Constants Used","title":"Conversion Factors","text":"","category":"section"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"kg per standard atomic mass unit: kg_per_amu = 1.66053906892e-27\neV per standard atomic mass unit: eV_per_amu = 9.3149410372e8\nJoules per eV: J_per_eV = 1.602176634e-19","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"Subatomic particles included with information about charge, mass, anomalous magnetic moment, and spin are:","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"photon\npion0\npion+\npion-\nmuon\nantimuon\nelectron\npositron\nproton\nanti-proton\nneutron\nanti-neutron\ndeuteron\nanti-deuteron","category":"page"},{"location":"constants_used/","page":"Constants Used","title":"Constants Used","text":"In addition, a collection of all the isotopes documented by NIST is included. Values may be updated with setIsos()","category":"page"},{"location":"helper_functions/#Helper-Functions","page":"Helper Functions","title":"Helper Functions","text":"","category":"section"},{"location":"helper_functions/","page":"Helper Functions","title":"Helper Functions","text":"The package provides several helper functions for simplified data lookup.","category":"page"},{"location":"helper_functions/#showconst()","page":"Helper Functions","title":"showconst()","text":"","category":"section"},{"location":"helper_functions/","page":"Helper Functions","title":"Helper Functions","text":"The showconst() function displays all available constants in the package.","category":"page"},{"location":"helper_functions/","page":"Helper Functions","title":"Helper Functions","text":"There are three options:","category":"page"},{"location":"helper_functions/","page":"Helper Functions","title":"Helper Functions","text":"julia> showconst() \n#list all the physical constants created by @APCdef\njulia> showconst(:subatomic) \n#list all possible subatomic particles\njulia> showconst(:Fe) \n# ':Fe' can be replaced by any atomic symbols\n# list all the available isotopes of that element","category":"page"},{"location":"constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants/#Available-Constants","page":"Constants","title":"Available Constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The macro @APCdef defines a set of physical constants with the provided set of units (For more details, see this page). The following example is how to use the macro and the physical constants.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> using AtomicAndPhysicalConstants\njulia> @APCdef\njulia> APC.C_LIGHT\n2.99792458e8","category":"page"},{"location":"constants/#Constants-Defined-by-@APCdef","page":"Constants","title":"Constants Defined by @APCdef","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Speed of light: C_LIGHT\nPlanck's constant: H_PLANCK\nReduced Planck's constant: H_BAR_PLANCK\nClassical electron radius: R_E\nClassical proton radius: R_P\nElementary charge: E_CHARGE\nVacuum permeability: MU_0_VAC\nPermittivity of free space: EPS_0_VAC\nClassical Radius Factor: CLASSICAL_RADIUS_FACTOR\nFine structure constant: FINE_STRUCTURE\nAvogadro's constant: N_AVOGADRO","category":"page"},{"location":"constants/#Species-Mass-and-Charge","page":"Constants","title":"Species Mass and Charge","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"To access mass or charge of a species, use massof() getter function for mass, and chargeof() getter function for charge. The function will return unit given to @APCdef. For Example:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> e = Species(\"electron\")\n\njulia> @APCdef unitsystem = ACCELERATOR unittype = Unitful\n# set units to ACCELERATOR unit system, where mass unit is eV/c^2 and charge unit is elementary charge\n\njulia> massof(e)\n510998.95069 eV c⁻²\n\njulia> chargeof(e)\n-1.0 e\n","category":"page"},{"location":"constants/#Atomic-mMass-and-Electron-Binding-Energies","page":"Constants","title":"Atomic m=Mass and Electron Binding Energies","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Unfortunately, Atomic and Isotopic masses do not scale perfectly to reality; we haven't been able to account for binding energies of electrons in varying shells in this code. As a result, the mass of any given isotope in any charge state is taken to be the mass of the neutrally charged isotope (from NIST) plus or minus the requisite number of  electron masses.","category":"page"},{"location":"constants/#Listing-Constants:-showconst()","page":"Constants","title":"Listing Constants: showconst()","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The showconst() function displays all available constants in the package.","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"There are three options:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> showconst() \n#list all the physical constants created by @APCdef\njulia> showconst(:subatomic) \n#list all possible subatomic particles\njulia> showconst(:Fe) \n# ':Fe' can be replaced by any atomic symbols\n# list all the available isotopes of that element","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"Note: You must run @APCdef before using showconst().","category":"page"},{"location":"constants/#Constants-Sources-and-Updates","page":"Constants","title":"Constants Sources and Updates","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The constants data comes from CODATA. You can choose which year of CODATA values to use through different submodules. If not specified, it defaults to CODATA2022. For example:","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"julia> using AtomicAndPhysicalConstants.CODATA2018 #use CODATA2018 values\njulia> using AtomicAndPhysicalConstants #use CODATA2022 values","category":"page"},{"location":"constants/","page":"Constants","title":"Constants","text":"NIST provides the isotope data, which we extract from their database. Since NIST doesn't maintain old releases, the isotope data always reflects their latest release.\nThe pion0 and pion± data comes from PDG (Particle Data Group). We extract this data from the database at pdgapi.lbl.gov","category":"page"},{"location":"constants/#setisos()","page":"Constants","title":"setisos()","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The setisos() function downloads the latest isotope data from NIST and creates a Julia file containing a usable dictionary of each element with all of their isotopes","category":"page"},{"location":"constants/#CODATA_releases()","page":"Constants","title":"CODATA_releases()","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"The CODATA_releases() function lists all the available CODATA release years in the package.","category":"page"},{"location":"species_functions/#Species-Functions","page":"Species Functions","title":"Species Functions","text":"","category":"section"},{"location":"species_functions/","page":"Species Functions","title":"Species Functions","text":"Species functions each take a Species as their parameter and return a specific property. Here are the available functions:","category":"page"},{"location":"species_functions/","page":"Species Functions","title":"Species Functions","text":"massof(::Species)\nchargeof(::Species)\natomicnumber(::Species)\nnameof(::Species)\nkindof(::Species)\ng_spin(::Species)\ng_spin = 2 m mu  S q is gyromagnetic ratio with:\nm is species mass\nmu is the species magnetic moment\nS is the species spin\nq is the species charge\ngyromagnetic_anomaly(::Species)\ngyromagnetic_ anomaly = (g-2)2 is the gyromagnetic anomaly with:\ng is the gyromagnetic ratio\ng_nucleon(::Species)\ng_ nucleon = g Z m_p  m is the gyromagnetic anomaly for a baryon with:\ng is the gyromagnetic ratio\nZ is the species charge\nm_p is the mass of a proton\nm is species mass","category":"page"},{"location":"species_functions/","page":"Species Functions","title":"Species Functions","text":"Note: You must call @APCdef before using massof(), chargeof(), or nameof().","category":"page"},{"location":"for_developers/#For-Developers:-Code-Logic","page":"For Developers","title":"For Developers: Code Logic","text":"","category":"section"},{"location":"for_developers/#Species","page":"For Developers","title":"Species","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"We provide a type Species for simple access to atomic and subatomic particle data. The constructor Species(::String) creates a Species instance from a given name. Users can retrieve data through getter functions such as massof() and chargeof().","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"julia> e = Species(\"electron\") # create an \"electron\" Species\n\njulia> @APCdef unittype = Unitful # specify return units and type of the getter functions via @APCdef\n\njulia> massof(e) # get the electron mass\n510998.95069 eV c⁻²\n\njulia> chargeof(e) # get the electron charge\n-1.0 e\n","category":"page"},{"location":"for_developers/#Species-Type-Internal-Structure","page":"For Developers","title":"Species Type Internal Structure","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"The Species type contains the following fields, defined in types.jl","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"A Species stores the following information:","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"name: name of the particle to track\ncharge: charge of the particle\nmass: mass of the particle\nspin: spin of the particle\nmoment: magnetic moment of the particle\niso: mass number of atomic isotope\nkind: The kind field classifies species into five types: ATOM, HADRON, LEPTON, PHOTON, and NULL.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Note: The NULL kind serves as a placeholder that can be used by Julia code. For example, if a struct has a Species component, a NULL species can be used as an initial value to indicate that the species component has not yet been set.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"struct Species\n  name::String # name of the particle to track\n  charge::typeof(1u\"e\") # charge of the particle, unit [e]\n  mass::typeof(1.0u\"MeV/c^2\") # mass of the particle, unit in [eV/c^2]\n  spin::typeof(1.0u\"h_bar\") # spin of the particle, unit in [ħ]\n  moment::typeof(1.0u\"J/T\") # magnetic moment of the particle (for now it's 0 unless we have a recorded value), unit in [J/T]\n  iso::Float64 # if the particle is an atomic isotope, this is the mass number, otherwise 0\n  kind::Kind.T #The kind field classifies species into five types: ATOM, HADRON, LEPTON, PHOTON, and NULL.\nend","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Note that charge, mass, spin, and moment are stored as Unitful.Quantity types with specific units, as indicated in the comments.","category":"page"},{"location":"for_developers/#Species-Data-storage","page":"For Developers","title":"Species Data storage","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"All possible Species data is stored internally. When the constructor Species(::String) is called, it retrieves this data to build a new Species.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Information about subatomic and atomic particles is stored in two structs: SubatomicSpecies and AtomicSpecies. Dictionary maps link particle names (as strings) to these structures. The structs are defined in types.jl, and the dictionaries are defined in subatomic_species.jl and isotopes.jl. ","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"SubatomicSpecies has the following fields","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"struct SubatomicSpecies\n  species_name::String              # common species_name of the particle\n  charge::typeof(1.0u\"e\")           # charge on the particle, in units of [e]\n  mass::typeof(1.0u\"MeV/c^2\")       # mass of the particle, in units of [eV/c^2]\n\tmoment::typeof(1.0u\"J/T\")         # magnetic moment, in units of [J/T]\n  spin::typeof(1.0u\"h_bar\")         # spin magnetic moment, in units of [ħ]\nend;","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"AtomicSpecies has the following fields","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"struct AtomicSpecies\n  Z::Int64                           # number of protons\n  species_name::String               # periodic table element symbol\n  mass::Dict{Int64,typeof(1.0 * u\"amu\")}  # a dict to store the masses, keyed by isotope\nend","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Note: mass is a dictionary that maps mass number to isotope mass. -1 maps to the average mass of common isotopes. Only existing isotopes is a key in the dictionary.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"The function subatomic_particle(name::String) searches for a subatomic particle with corresponding name in the dictionary and builds a Species from SubatomicSpecies.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Similarly, create_atomic_species(name::String, charge::Int, iso::Int) searches for an atomic particle with corresponding name and iso in the dictionary and builds a Species with the corresponding mass and charge. Other fields—spin, moment, and kind—are computed accordingly.","category":"page"},{"location":"for_developers/#Species-Constructor","page":"For Developers","title":"Species Constructor","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"The constructor parses the name and creates the according Species.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"The constructor follows this order for parsing the name.","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Check whether it is a Null Species, if yes then creates a Null Species by setting kind to NULL\nCheck whether they are Anti-particles.\nCheck whether it is a subatomic particles, if yes then use subatomic_particle() to create the Species.\nCheck whether it is an atomic species.\nParse the iso number in front of the atomic symbol\nParse the charge number in the back of the atomic symbol\nCall create_atomic_species() to create the Species.","category":"page"},{"location":"for_developers/#@APCdef","page":"For Developers","title":"@APCdef","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"@APCdef configures physical constants and Species getter functions using the specified:","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Unit system\nReturn type (Float, Unitful, or DynamicQuantities)\nTuple name\nTuple output flag (whether to wrap constants in a tuple","category":"page"},{"location":"for_developers/#1-Predefined-Unit-Systems","page":"For Developers","title":"1 Predefined Unit Systems","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"For convient usage, we predefined 3 unit systems:","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"ACCELERATOR: Uses high-energy physics units (eV/c², m, s, eV, e)\nMKS: Standard SI units (kg, m, s, J, C)\nCGS: CGS units (g, cm, s, J, C)","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"@APCdef unitsystem = MKS","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"The user can specify a set of units quickly. ","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Since users can also define their own unit system. The units of the tuple must be in the order of “mass unit”, “length unit”, “time unit”, “energy unit”, and “charge unit”. The unit dimension is checked in macro.","category":"page"},{"location":"for_developers/#2-Ensuring-Single-Macro-Call","page":"For Developers","title":"2 Ensuring Single Macro Call","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Since @APCdef defines massof(), we check whether @APCdef is called in the module by check whether massof() is in the namespace.","category":"page"},{"location":"for_developers/#3-Extract-Keyword-Arguements","page":"For Developers","title":"3 Extract Keyword Arguements","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Julia macro does accept keyword arguments, so the next section sets default values","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"unittype = :Float\nunitsystem = ACCELERATOR\nname = :APC\ntupleflag = true","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"And extracts keyword arguement variables from the marco expression input.","category":"page"},{"location":"for_developers/#4-Collecting-Constants","page":"For Developers","title":"4 Collecting Constants","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Extracts constants from the parent module whose names start with __b_ and are not intermediate variables (e.g., those containing _m_).\nConverts them to appropriate units based on the conversion dictionary.\nConstructs a dictionary constantsdict with transformed values.","category":"page"},{"location":"for_developers/#5-Unit-Type-Conversion","page":"For Developers","title":"5 Unit Type Conversion","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Based on unittype:","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":":Unitful: Constants retain their units.\n:Float: Extracts .val from quantities, stripping units.\n:DynamicQuantities: Converts values into DynamicQuantities.Quantity","category":"page"},{"location":"for_developers/#6-Output-Format:-Tuple-or-Individual-Variables","page":"For Developers","title":"6 Output Format: Tuple or Individual Variables","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Determined by tupleflag:","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"true → constants are packed into a NamedTuple under the given module name.\nfalse → constants are returned as independent global variables.","category":"page"},{"location":"for_developers/#7-Generate-Species-Getter-Functions","page":"For Developers","title":"7 Generate Species Getter Functions","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"Generated via generate_particle_property_functions(...):","category":"page"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"massof: Returns the mass of a Species or species name.\nchargeof: Returns the charge.\nspinof: Returns the spin (except for null or atomic species).\nnameof: Returns a species' name, including isotope/charge info unless basename = true.","category":"page"},{"location":"for_developers/#8-Return-statement","page":"For Developers","title":"8 Return statement","text":"","category":"section"},{"location":"for_developers/","page":"For Developers","title":"For Developers","text":"APCconsts stores the macro-defined name.\nUNITS holds a NamedTuple mapping physical quantity symbols (:mass, :length, etc.) to their respective units.\nSpecies Getter Functions\nConstants (either wrapped in named tuple or not)","category":"page"},{"location":"units/#Setting-Units-for-Constants-And-Particle-Functions-using-@APCdef","page":"Setting Units: APCdef","title":"Setting Units for Constants And Particle Functions using @APCdef","text":"","category":"section"},{"location":"units/#@APCdef-Description","page":"Setting Units: APCdef","title":"@APCdef Description","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"@APCdef must be called during package initialization. It sets the units for physical constants,  species mass, and charge.  The macro also defines physical constants in the appropriate units and creates getter functions  for species mass and charge with appropriate units and data. See the Species page for more details. Note @APCdef can only be called once.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Users can choose their preferred units for mass, length, time, energy, and charge using predefined unit systems: ACCELERATOR (default), MKS, or CGS. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Users can also specify whether constants should be of type Float64 (default), Unitful,  or Dynamic Quantities for easier unit calculations. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"All constants are stored in a named tuple by default, whose name can be customized (defaults to APC). For example, the default name for the speed of light is APC.C_LIGHT.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Alternatively, users can set tupleflag to false to define constants as global variables in the namespace. This allows direct access to the constants without using the named tuple prefix.","category":"page"},{"location":"units/#@APCdef-Syntax","page":"Setting Units: APCdef","title":"@APCdef Syntax","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"@APCdef(name = APC, unitsystem = ACCELERATOR, unittype = Float, tupleflag = true)","category":"page"},{"location":"units/#Keyword-Parameters","page":"Setting Units: APCdef","title":"Keyword Parameters","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"name specifies the named tuple that stores the constants (default: APC).\nunitsystem sets the unit system for constants: ACCELERATOR (default), MKS, or CGS.\nunittype sets the constant type: Float (default), Unitful, or DynamicQuantities. ","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"This also determines the return type of both the named tuple and the massof() and chargeof() functions. See the DynamicQuantities.jl documentation for a discussion of the difference between how Unitful and DynamicQuatities handle units. Note: setting the unit type to DynamicQuantities will return quantities only in SI units.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"tupleflag determines whether to store constants in a named tuple (default: true).","category":"page"},{"location":"units/#Output:","page":"Setting Units: APCdef","title":"Output:","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"It creates four getter functions:","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"massof()\nchargeof()\nspinof()\nnameof()","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"If tupleflag = true then it creates a name tuple with all the physical constants.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"If tupleflag = false then it creates the constants as individual variables.","category":"page"},{"location":"units/#Unit-Systems","page":"Setting Units: APCdef","title":"Unit Systems","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"ACCELERATOR units:\nmass: eV/c^2\nlength: m\ntime: s\nenergy: eV\ncharge: elementary charge\nMKS units:\nmass: kg\nlength: m\ntime: s\nenergy: J\ncharge: C\nCGS units:\nmass: g\nlength: cm\ntime: s\nenergy: J\ncharge: C\nUsers can also define their own units by creating a tuple of Unitful units.\nThe tuple must be using the types in Unitful\nThe tuple must have 5 elements\nThe elements must be ordered in “mass unit”, “length unit”, “time unit”, “energy unit”, and “charge unit”.","category":"page"},{"location":"units/#Example","page":"Setting Units: APCdef","title":"Example","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef  \n# Sets unit system to ACCELERATOR (default). define constants with type Float64.\n\njulia> APC.C_LIGHT  \n# Access the constant within the named tuple `APC`.\n2.99792458e8        \n# Now the constant is defined with units m/s and type Float64.\njulia> APC.E_CHARGE  \n1.0         \n# The default unit for charge is elementary charge.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef unittype = Unitful unitsystem = MKS tupleflag = false \n# Define constants with type Unitful. Sets unit system to MKS. Do not wrap constants in a named tuple.\n\njulia> E_CHARGE  \n# Access the constant directly\n1.602176634e-19 C        \n# Now the constant is defined with units C and type Unitful.","category":"page"},{"location":"units/#Unitful","page":"Setting Units: APCdef","title":"Unitful","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful.jl is a powerful package for managing physical units.  This package uses Unitful internally to store constants.","category":"page"},{"location":"units/#Units","page":"Setting Units: APCdef","title":"Units","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful uses the macro @u_str to create units.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> kg = u\"kg\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"The variable kg represents the unit kilogram.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Creating constants with units is straightforward—simply write the number before the unit.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> M = 1u\"kg\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Now M represents 1 kilogram.","category":"page"},{"location":"units/#Conversion-to-Float","page":"Setting Units: APCdef","title":"Conversion to Float","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To convert a Unitful object to Float64, access the .val field.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> a = 1.5u\"kg\"\njulia> a.val\n1.5","category":"page"},{"location":"units/#Unit-Conversions","page":"Setting Units: APCdef","title":"Unit Conversions","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Unitful provides a convenient way to create new units with expressions. You can also add prefixes directly.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> m = 0.511u\"MeV/c^2\"","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To convert between units, use the uconvert() function with the target unit as the first parameter and the variable as the second.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> uconvert(u\"kg\",m)\n9.109402419518556e-31 kg","category":"page"},{"location":"units/#@APCdef-Returning-Unitful-Type","page":"Setting Units: APCdef","title":"@APCdef Returning Unitful Type","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"To use Unitful-typed constants, set unittype to Unitful.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef unittype = Unitful \n\njulia> APC.C_LIGHT \n2.99792458e8 m s⁻¹ # Now the constant is a Unitful quantity.","category":"page"},{"location":"units/#Package-specific-Unitful-Units","page":"Setting Units: APCdef","title":"Package-specific Unitful Units","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"AtomicAndPhysicalConstants defines three custom units not found in the Unitful package.  Users can access these units with the @u_str macro, just like standard Unitful units.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"amu: It represents the atomic mass unit.\ne: It represents the elementary charge.\nh_bar: It represents the reduced Planck's constant. It is used as the unit for spin.","category":"page"},{"location":"units/#@APCdef-Returning-DynamicQuantities.jl-Type","page":"Setting Units: APCdef","title":"@APCdef Returning DynamicQuantities.jl Type","text":"","category":"section"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"DynamicQuantities.jl is another popular package for managing units. We also support returning constants in DynamicQuantities type.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"julia> @APCdef unittype = DynamicQuantities\n\njulia> APC.C_LIGHT \n2.99792458e8 m s⁻¹ # Now the constant is a DynamicQuantities quantity.","category":"page"},{"location":"units/","page":"Setting Units: APCdef","title":"Setting Units: APCdef","text":"Note: setting the unit type to DynamicQuantities will return quantities only in SI units.","category":"page"},{"location":"#AtomicAndPhysicalConstants.jl","page":"Home","title":"AtomicAndPhysicalConstants.jl","text":"","category":"section"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use AtomicAndPhysicalConstants, like any Julia package, execute the commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"AtomicAndPhysicalConstants.jl\")\njulia> using AtomicAndPhysicalConstants","category":"page"},{"location":"","page":"Home","title":"Home","text":"The macro @APCdef initializes the APC package. @APCdef sets the units for physical constants, species mass and charge. It defines the physical constants and getter functions for species mass and charge with the proper unit and data. Documentation is  here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @APCdef\njulia> APC.C_LIGHT\n2.99792458e8\njulia> e = Species(\"electron\")\njulia> massof(e)\n510998.95069","category":"page"},{"location":"","page":"Home","title":"Home","text":"Users have the options for choosing the return type (Float64, Unitful, or DynamicQuantities) and unit of the constants, see this page","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl (APC) provides a quick way to access information about different species and physical constants optimized for faster compile time and simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is designed to provide atomic and physical constants including things like the speed of light, subatomic particle properties, atomic isotope properties, etc. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Values are obtained from CODATA (Committee on Data of the International Science Council), NIST (National Institute of Standards and Technology), and PDG (Particle Data Group). This package enables users to access and customize units for the constants. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is compatible with Julia's Unitful.jl and DynamicQuantities.jl library for convenient unit manipulation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtomicAndPhysicalConstants.jl has the following main features and advantages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simple Unit Manipulation: Users can define the units they want to use in a simple and consistent way. Unitful.jl provides a simple way to do unit conversion and calculations.\nRigorous and Up-to-Date Data: We uses the most updated values from creditable sources. We also provided the option to use past data for specific purposes.\nSimple usage: Users can access data of a wide range of particles and physic constants by simply defining a species with their name or call a variable in the namespace. ","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation is at  https://bmad-sim.github.io/AtomicAndPhysicalConstants.jl","category":"page"},{"location":"#Defining-Species","page":"Home","title":"Defining Species","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Species is a structure that holds information about a particle or atom, such as its mass, charge, spin, and other properties. It is designed to provide a convenient way to access and manipulate data related to different species in physics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The constructor Species() helps you create a structure with all the information of the species stored in it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> e = Species(\"electron\")\njulia> hydrogen = Species(\"H\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You could use getter functions to access its properties or directly calling its fields. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> massof(e)\n510998.95069\njulia> hydrogen.spin\n1.0 h_bar","category":"page"},{"location":"","page":"Home","title":"Home","text":"See more about Species() constructors and getter functions here","category":"page"},{"location":"species/#Species","page":"Species","title":"Species","text":"","category":"section"},{"location":"species/#Introduction","page":"Species","title":"Introduction","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Species is a type that stores information about a particle.","category":"page"},{"location":"species/#Getter-Functions","page":"Species","title":"Getter Functions","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"massof()\nchargeof()\nnameof()\nkindof()","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"To access mass or charge of a species, use massof() getter function for mass, and chargeof() getter function for charge. The function will return unit given to @APCdef. See this page for more information.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Use the function nameof() to access the species name.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"kindof() returns the kind of the Species.","category":"page"},{"location":"species/#Construct-a-Species","page":"Species","title":"Construct a Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"Use the constructor Species(::String) to create a species.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Note: Species names follow the OpenPMD standard.","category":"page"},{"location":"species/#Constructing-a-Null-Species","page":"Species","title":"Constructing a Null Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"The Null species is useful for bookkeeping purposes, such as a placeholder in a struct component to indicate an unset species. To instantiate:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"Null\")\njulia> Species() # Same as above","category":"page"},{"location":"species/#Constructing-Subatomic-Species","page":"Species","title":"Constructing Subatomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct a subatomic species, provide the exact name of the particle in the name field. Note that the name must be provided exactly.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"electron\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"For antiparticles, prepend \"anti-\" to the name.","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"anti-proton\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"See the list of all available subatomic species at the end of this page.","category":"page"},{"location":"species/#Constructing-Atomic-Species","page":"Species","title":"Constructing Atomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"To construct an atomic species, include these components in name:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Atomic Symbol\nMass number of the atom (optional), format:\nMass number before the atomic symbol (accepts unicode superscript)\nOptional \"#\" symbol at the beginning\nIf not specified, uses the average of the mass in naturally occurring samples.\nThese formats all represent Hydrogen-1:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"1H\")\njulia> Species(\"¹H\")\njulia> Species(\"#1H\")","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Charge (optional), format (all accept unicode superscript):\n\"+\" for single positive charge\n\"++\" for double positive charge\n\"+n\" or \"n+\" for n positive charges\n\"-\" for single negative charge\n\"--\" for double negative charge\n\"-n\" or \"n-\" for n negative charges\nDefaults to 0 if not specified\nAdd \"anti-\" prefix to construct an anti-atom","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"Example:","category":"page"},{"location":"species/","page":"Species","title":"Species","text":"julia> Species(\"13C+\")   # Carbon-13 with a single positive charge\njulia> Species(\"¹⁵N³⁻\")  # Nitrogen-15 with a 3 negative charge\njulia> Species(\"Al+3\")   # Average Aluminum with 3 positive charge\njulia> Species(\"anti-H\") # Anti-hydrogen","category":"page"},{"location":"species/#List-of-Available-Subatomic-Species","page":"Species","title":"List of Available Subatomic Species","text":"","category":"section"},{"location":"species/","page":"Species","title":"Species","text":"anti-deuteron\nanti-electron or positron\nanti-neutron\nanti-proton\nanti-muon\ndeuteron\nelectron\nmuon\nneutron\nphoton\npion0\npion+\npion-\npositron\nproton","category":"page"}]
}
